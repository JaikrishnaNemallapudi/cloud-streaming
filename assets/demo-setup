#!/bin/bash
#
# Copyright (C) 2020-2022 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

if [[ ! ( -n "$DEVICE" && "$DEVICE" =~ /dev/dri/ && -e $DEVICE ) ]]; then
  echo "error: device not available: $DEVICE"
  echo "error:   if you run under docker add host device(s) with:" >&2
  echo "error:     --device=$DEVICE (preferred)" >&2
  echo "error:     --device=/dev/dri/" >&2
  echo "error:     --privileged" >&2
  echo "error:   you can change device you want to use with:" >&2
  echo "error:     -e DEVICE=${DEVICE:-/dev/dri/renderD128}" >&2
  exit -1
fi

function get_gid()
{
  local grp=$1
  local gid=$(grep "^$grp:" /etc/group | cut -d: -f3)
  if [ -n "$gid" ]; then
    echo "$gid"
  else
    echo "$grp" # $grp _is_ GID which does not have group name
  fi
}

device_grp=$(ls -g $DEVICE | awk '{print $3}' | uniq)
device_gid=$(get_gid $device_grp)

# groups might output some error message if there is no group name for the
# GID. That's common case for the docker container and we just need to
# ignore the error.
if ! groups 2>/dev/null | grep -q "$device_grp"; then
  echo "error: user (UID=`id -u`) is not a member of GID=$device_gid" >&2
  echo "error:   if you run under docker rerun with:" >&2
  echo "error:     --group-add=$device_gid" >&2
  echo "error:   if you run on bare metal add user to group (see 'man 8 usermod')" >&2
  exit -1
fi

function get_perm() {
  if [ "$1" = "r" ]; then
    echo "reading"
  elif [ "$1" = "w" ]; then
    echo "writing"
  else
    echo "bug: script does not support specified permission: $1" >&2
  fi
}

function print_error() {
  folder=$1
  perm=$2
  user=$3
  echo "error: can't access $folder for $(get_perm $perm) (UID=$(id -u))" >&2
  echo "error:   if you attempt to map a host folder under docker" >&2
  echo "error:   you might need to adjust its access permissions on a host side" >&2
  echo "error:   if you attempt to change docker user with" >&2
  echo "error:     docker run -u \$(id -u):\$(id -g)" >&2
  echo "error:   then you actually must mount a number of folders" >&2
  echo "error:   since by default they are owned by internal container user" >&2
}

function check_access() {
  folder=$1
  perm=$2
  if ! test -$perm $folder; then
    print_error $folder $perm $u
    exit -1
  fi
}
